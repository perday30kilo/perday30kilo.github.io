[{"categories":["About"],"content":"关于我","date":"2022-03-25","objectID":"/about/","tags":["About"],"title":"关于","uri":"/about/"},{"categories":["About"],"content":"每天前进三十公里，苦练基本功。 本博客由具有多年一线互联网经验的多位技术专家根据自身积累维护，仅供学习和参考。 大家一起学习一起打怪升级~~~ ","date":"2022-03-25","objectID":"/about/:0:0","tags":["About"],"title":"关于","uri":"/about/"},{"categories":null,"content":"LoveIt ","date":"2022-03-25","objectID":"/first_post/:0:0","tags":null,"title":"First_post","uri":"/first_post/"},{"categories":null,"content":"1 DDD工作坊实操 十个步骤，依次为： 确定利益相关人 确定业务期望和愿景 对问题域的共同理解 确定项目的业务范围 确定业务流程 史诗级故事和主故事 运用用例分析场景 通过边界识别限界上下文 上下文映射 领域架构 ","date":"2020-12-01","objectID":"/ddd-practice1/:0:0","tags":null,"title":"Ddd Practice1","uri":"/ddd-practice1/"},{"categories":null,"content":"1.1 对问题域的共同理解 对问题域的共同理解 我认为：“对问题域（Problem Domain）的识别其实就是对客户痛点的识别。之所以要开发这个软件，目的就是解决这些痛点，为应对这些问题提供具有业务价值的功能。在识别痛点的过程中，需要始终从业务期望与愿景出发，与不同的利益相关人进行交流，如此才能达成对问题域的共同理解。”在工作坊中，一位业务人员补充了我对问题域定义的不足，她认为问题域不仅是对痛点的识别，还包括系统所要提供的价值。 实操要点: 通过和产品业务的沟通识别清楚需求利益相关方的痛点 讲清楚需求的收益、关键指标、杠杆率 ","date":"2020-12-01","objectID":"/ddd-practice1/:1:0","tags":null,"title":"Ddd Practice1","uri":"/ddd-practice1/"},{"categories":null,"content":"1.2 确定项目的业务范围 之所以要确定项目的业务范围，是为了明确整个系统的边界。明确系统边界是架构设计的重要前提，它一方面可以明确职责划分，了解哪些内容才属于领域驱动设计的范畴；另一方面则可以事先明确当前系统需要与哪些外部系统集成。 ","date":"2020-12-01","objectID":"/ddd-practice1/:2:0","tags":null,"title":"Ddd Practice1","uri":"/ddd-practice1/"},{"categories":null,"content":"1.3 运用用例分析场景 一个主用例可以认为是一个具有业务价值的业务功能。我提出的用例场景分析步骤为： 确定业务流程，通过业务流程识别参与者（Actor）； 根据每个参与者识别属于该参与者的用例，遵循一个参与者一张用例图的原则，保证用例图的直观与清晰； 对识别出来的用例根据语义相关性和功能相关性进行分类，确定用例的主题边界，并对每个主题进行命名。 首先，我让学员通过识别系统的参与者驱动用例的识别。一个参与者一个用例图，可以让我们的用例分析既有清晰的分析起点，又能保证用例图的清晰直观： 一旦准确地识别出用例，再根据语义相关性和功能相关性对这些用例进行分组，最后，确定主题边界（Subject Boundary）就变得相对容易了. 这些识别出来的主题边界其实就是限界上下文的候选了。可以看到，不同团队因为需求理解的不同，识别出来的主题边界确实存在差别，但这个差别是非常细微的，基本能就限界上下文的边界达成一致。这些识别出来的用例同时也将作为统一语言的一部分，在后续的领域建模和战术设计中提供非常有价值的指导. ","date":"2020-12-01","objectID":"/ddd-practice1/:3:0","tags":null,"title":"Ddd Practice1","uri":"/ddd-practice1/"},{"categories":null,"content":"1.4 领域架构 在架构层面，我引入了RUP的4+1视图，这样可以使得领域驱动战略设计的成果显得更加系统化，能够为业务人员、开发人员、运维人员提供不同视角的架构指导。例如获得的逻辑视图可以非常清晰地表达系统层面与限界上下文层面各自的逻辑组成： 进程视图则使用时序图针对那些需要异步处理或分布式通信的用例进行了清晰刻画： ","date":"2020-12-01","objectID":"/ddd-practice1/:4:0","tags":null,"title":"Ddd Practice1","uri":"/ddd-practice1/"},{"categories":null,"content":"1 Sentinel是什么 主要特性 开源生态 Sentinel 分为两个部分: 核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。 控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。 2 Quick Start ","date":"2020-11-26","objectID":"/sentinel/:0:0","tags":null,"title":"Sentinel","uri":"/sentinel/"},{"categories":null,"content":"2.1 Sentinel Dashboard java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar 从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的登录功能，默认用户名和密码都是 sentinel ","date":"2020-11-26","objectID":"/sentinel/:1:0","tags":null,"title":"Sentinel","uri":"/sentinel/"},{"categories":null,"content":"2.2 如何使用 我们说的资源，可以是任何东西，服务，服务里的方法，甚至是一段代码。使用 Sentinel 来进行资源保护，主要分为几个步骤: 1 定义资源 2 定义规则 3 检验规则是否生效 先把可能需要保护的资源定义好（埋点），之后再配置规则。也可以理解为，只要有了资源，我们就可以在任何时候灵活地定义各种流量控制规则。在编码的时候，只需要考虑这个代码是否需要保护，如果需要保护，就将之定义为一个资源。 返回布尔值方式定义资源 ","date":"2020-11-26","objectID":"/sentinel/:2:0","tags":null,"title":"Sentinel","uri":"/sentinel/"},{"categories":null,"content":"0 背景 命令行是程序员诊断问题和分析问题的基础。 1 业务日志分析 如果应用系统出现异常，一般都会在业务日志中体现 统计当天业务日志中ERROR出现数量：egrep ERROR –color logname | wc -l ，如果错误数量过大，一般都是有问题的 查看日志中ERROR后10行具体报错：egrep -A 10 ERROR logname | less ，或 -C 10 查看ERROR前后10行日志 按照时间段过滤日志 sed -n '/起始时间/,/结束时间/p' 日志文件 sed -n '/2018-12-06 00:00:00/,/2018-12-06 00:03:00/p' logname # 查询三分钟内的日志，后再跟grep 过滤相应关键字 sed -n '/2018-12-06 08:38:00/,$p' logname | less # 查询指定时间到当前日志 ps：禁止使用vim直接打开日志文件 2 JVM相关 名称 主要作用 jps JVM Process Status Tool,用来查看基于HotSpot的JVM里面中，所有具有访问权限的Java进程的具体状态, 包括进程ID，进程启动的路径及启动参数等等，与unix上的ps类似，只不过jps是用来显示java进程，可以把jps理解为ps的一个子集。 jstat JVM Statistics Monitoring Tool,jstat是用于监视虚拟各种运行状态信息的命令行工具，它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。 jinfo Configuration info for java，命令的作用是实时的查看和调整虚拟机的参数。 jmap Memory Map for java，生成虚拟机的内存转储快照(heapdump) jhat JVM Heap Dump Browser，用于分析heapdump文件，它会建立一个Http/HTML服务器，让用户可以在浏览器上查看分析结果 jstack Stack Trace for java，显示虚拟机的线程快照。 使用–help，查看命令具体使用 常用： jps -v jstat -gc 118694 500 5 jmap -dump:live,format=b,file=dump.hprof 29170 jmap -heap 29170 jmap -histo:live 29170 | more jmap -permstat 29170 jstack -l 29170 |more jstack -l pid |wc -l jstack -l pid |grep \"BLOCKED\"|wc -l jstack -l pid |grep \"Waiting on condition\"|wc -l 线程block问题通常是等待io、等待网络、等待监视器锁等造成，可能会导致请求超时、造成造成线程数暴涨导致系统502等。 假设出现这样的问题，主要是关注jstack 出来的BLOCKED、Waiting on condition、Waiting on monitor entry等状态信息。 假设大量线程在“waiting for monitor entry”：可能是一个全局锁堵塞住了大量线程。 假设短时间内打印的 thread dump 文件反映。随着时间流逝。waiting for monitor entry 的线程越来越多，没有降低的趋势，可能意味着某些线程在临界区里呆的时间太长了，以至于越来越多新线程迟迟无法进入临界区。 假设大量线程在“waiting on condition”：可能是它们又跑去获取第三方资源，迟迟获取不到Response，导致大量线程进入等待状态。 假设发现有大量的线程都处在 Wait on condition，从线程堆栈看，正等待网络读写，这可能是一个网络瓶颈的征兆，由于网络堵塞导致线程无法运行。 3 日志相关 ","date":"2020-11-19","objectID":"/server-command/:0:0","tags":null,"title":"Server Command","uri":"/server-command/"},{"categories":null,"content":"oomkiller 简介 ","date":"2020-08-16","objectID":"/oom/:0:0","tags":null,"title":"Oom","uri":"/oom/"},{"categories":null,"content":"按需分配物理页面 　很多情况下，一个进程会申请一块很大的内存，但只是用到其中的一小部分。为了避免内存的浪费，在分配页面时，Linux 采用的是按需分配物理页面的方式。譬如说，某个进程调用malloc()申请了一块小内存，这时内核会分配一个虚拟页面，但这个页面不会映射到实际的物理页面。 从图中可以看到，当程序首次访问这个虚拟页面时，会触发一个缺页异常 (page fault)。这时内核会分配一个物理页面，让虚拟页面映射到这个物理页面，同时更新进程的页表 (page table)。 ","date":"2020-08-16","objectID":"/oom/:1:0","tags":null,"title":"Oom","uri":"/oom/"},{"categories":null,"content":"Memory Overcommit Memory Overcommit 这种按需分配物理页面的方式，可以大大节省物理内存的使用，但有时会导致 Memory Overcommit。所谓 Memory Overcommit，也就是说，所有进程使用的虚拟内存超过了系统的物理内存和交换空间的总和。默认情况下，Linux 是允许 Memory Overcommit 的。并且在大多数情况下，Memory Overcommit 也是安全的，因为很多进程只是申请了很多内存，但实际使用到的内存并不多。 但万一很多进程都使用了申请来的大部分内存，就可能导致物理内存和交换空间不够用了，这时内核的 OOM Killer 就会出马，它会选择杀掉一个或多个进程，这样就能腾出一些内存给其它进程使用。 在 Linux 中，可以通过内核参数vm.overcommit_memory去控制是否允许 overcommit： 默认值是 0，在这种情况下，只允许轻微的 overcommit，而比较明显的 overcommit 将不被允许。 如果设置为 1，表示总是允许 overcommit。 如果设置为 2，则表示总是禁止 overcommit。也就是说，如果某个申请内存的操作将导致 overcommit，那么这个操作将不会得逞。 那么对内核来说，怎样才算 overcommit 呢？Linux 设定了一个阈值，叫做 CommitLimit，如果所有进程申请的总内存超过了 CommitLimit，那就算是 overcommit 了。在/proc/meminfo中可以看到 CommitLimit 的大小： 1 2 $ cat /proc/meminfo | grep CommitLimit CommitLimit: 3829768 kB 　CommitLimit 的值是这样计算的： CommitLimit = [swap size] + [RAM size] * vm.overcommit_ratio / 100 　其中的vm.overcommit_ratio也是内核参数，它的默认值是 50。 ","date":"2020-08-16","objectID":"/oom/:2:0","tags":null,"title":"Oom","uri":"/oom/"},{"categories":null,"content":"OOM Killer 　当物理内存和交换空间不够用时，OOM Killer 就会选择杀死进程，那么它是怎样知道要先杀死哪个进程呢？其实 Linux 的每个进程都有一个 oom_score (位于/proc//oom_score)，这个值越大，就越有可能被 OOM Killer 选中。oom_score 的值是由很多因素共同决定的，这里列举几个因素： 如果进程消耗的内存越大，它的 oom_score 通常也会越大。 如果进程运行了很长时间，并且消耗很多 CPU 时间，那么通常它的 oom_score 会偏小。 如果进程以 superuser 的身份运行，那么它的 oom_score 也会偏小。 如何才能尽量防止某个重要的进程被杀死呢？Linux 每个进程都有一个 oom_adj (位于/proc//oom_adj)，这个值的范围是 [-17, +15]，进程的 oom_adj 会影响 oom_score 的计算，也就是说，我们可以通过调小进程的 oom_adj 从而降低进程的 oom_score。对于一些比较重要的进程，例如 MySQL，我们想尽量避免它被 OOM Killer 杀死，这时候就可以调低它的 oom_adj 的值，例如： $ sudo echo -10 \u003e /proc/$(pidof mysqld)/oom_adj 交换空间 通常来说操作系统都会开启交换空间，那么交换空间有什么作用呢？ 允许系统将一些长期没有用到的物理页面换出到交换空间，这样就能节省物理内存的使用。 当物理内存不够使用时，系统可以利用交换空间作为缓冲，防止一些进程因为内存不够而被 OOM Killer 杀死。 vm.swppiness可以用来配置交换空间，取值范围是 [0, 100]，在 Linux 3.5 之后，它有这些作用： 设置为 0 表示禁止交换空间的使用，只有当系统 OOM 时才允许使用交换空间。 设置为 1 不会禁止交换空间的使用，但系统会尽量不去使用交换空间。 设置为 100 表示系统会很喜欢使用交换空间。 交换空间是位于磁盘之上的，对操作系统来说，访问磁盘的速度远远慢于访问物理内存。所以我们希望，当物理内存足够使用时，系统能尽量不去使用交换空间，这样能降低页面换入换出的频率，因为频繁的页面换入换出操作会严重影响系统的性能。为了达到这种效果，我们可以把vm.swappiness设置为 1： sudo echo 1 \u003e /proc/sys/vm/swappiness ","date":"2020-08-16","objectID":"/oom/:3:0","tags":null,"title":"Oom","uri":"/oom/"},{"categories":null,"content":"排查命令 dmesg 如果发现自己的java进程悄无声息的消失了，几乎没有留下任何线索，那么dmesg一发，很有可能有你想要的。 sudo dmesg|grep -i kill|less ","date":"2020-08-16","objectID":"/oom/:4:0","tags":null,"title":"Oom","uri":"/oom/"},{"categories":null,"content":" Linux 内核根据应用程序的要求分配内存，通常来说应用程序分配了内存但是并没有实际全部使用，为了提高性能，这部分没用的内存可以留作它用，这部分内存是属于每个进程的，内核直接回收利用的话比较麻烦，所以内核采用一种过度分配内存（over-commit memory）的办法来间接利用这部分 “空闲” 的内存，提高整体内存的使用效率。一般来说这样做没有问题，但当大多数应用程序都消耗完自己的内存的时候麻烦就来了，因为这些应用程序的内存需求加起来超出了物理内存（包括 swap）的容量，内核（OOM killer）必须杀掉一些进程才能腾出空间保障系统正常运行。用银行的例子来讲可能更容易懂一些，部分人取钱的时候银行不怕，银行有足够的存款应付，当全国人民（或者绝大多数）都取钱而且每个人都想把自己钱取完的时候银行的麻烦就来了，银行实际上是没有这么多钱给大家取的。 内核检测到系统内存不足、挑选并杀掉某个进程的过程可以参考内核源代码 linux/mm/oom_kill.c ，当系统内存不足的时候，out_of_memory() 被触发，然后调用 select_bad_process() 选择一个 “bad” 进程杀掉，如何判断和选择一个 “bad” 进程呢，总不能随机选吧？挑选的过程由 oom_badness() 决定，挑选的算法和想法都很简单很朴实：最 bad 的那个进程就是那个最占用内存的进程。 /** * oom_badness - heuristic function to determine which candidate task to kill * @p: task struct of which task we should calculate * @totalpages: total present RAM allowed for page allocation * * The heuristic for determining which task to kill is made to be as simple and * predictable as possible. The goal is to return the highest value for the * task consuming the most memory to avoid subsequent oom failures. */ unsigned long oom_badness(struct task_struct *p, struct mem_cgroup *memcg, const nodemask_t *nodemask, unsigned long totalpages) { long points; long adj; if (oom_unkillable_task(p, memcg, nodemask)) return 0; p = find_lock_task_mm(p); if (!p) return 0; adj = (long)p-\u0026gt;signal-\u0026gt;oom_score_adj; if (adj == OOM_SCORE_ADJ_MIN) { task_unlock(p); return 0; } /* * The baseline for the badness score is the proportion of RAM that each * task's rss, pagetable and swap space use. */ points = get_mm_rss(p-\u0026gt;mm) + p-\u0026gt;mm-\u0026gt;nr_ptes + get_mm_counter(p-\u0026gt;mm, MM_SWAPENTS); task_unlock(p); /* * Root processes get 3% bonus, just like the __vm_enough_memory() * implementation used by LSMs. */ if (has_capability_noaudit(p, CAP_SYS_ADMIN)) adj -= 30; /* Normalize to oom_score_adj units */ adj *= totalpages / 1000; points += adj; /* * Never return 0 for an eligible task regardless of the root bonus and * oom_score_adj (oom_score_adj can't be OOM_SCORE_ADJ_MIN here). */ return points \u0026gt; 0 ? points : 1; } 从上面的 oom_kill.c 代码里可以看到 oom_badness() 给每个进程打分，根据 points 的高低来决定杀哪个进程，这个 points 可以根据 adj 调节，root 权限的进程通常被认为很重要，不应该被轻易杀掉，所以打分的时候可以得到 3% 的优惠（adj -= 30; 分数越低越不容易被杀掉）。我们可以在用户空间通过操作每个进程的 oom_adj 内核参数来决定哪些进程不这么容易被 OOM killer 选中杀掉。比如，如果不想 MySQL 进程被轻易杀掉的话可以找到 MySQL 运行的进程号后，调整 oom_score_adj 为 -15（注意 points 越小越不容易被杀）： # ps aux | grep mysqld mysql 2196 1.6 2.1 623800 44876 ? Ssl 09:42 0:00 /usr/sbin/mysqld # cat /proc/2196/oom_score_adj 0 # echo -15 \u0026gt; /proc/2196/oom_score_adj ","date":"2020-08-16","objectID":"/oom/:5:0","tags":null,"title":"Oom","uri":"/oom/"},{"categories":null,"content":"找出最有可能被 OOM Killer 杀掉的进程 # vi oomscore.sh #!/bin/bash for proc in $(find /proc -maxdepth 1 -regex '/proc/[0-9]+'); do printf \"%2d %5d %s\\n\" \\ \"$(cat $proc/oom_score)\" \\ \"$(basename $proc)\" \\ \"$(cat $proc/cmdline | tr '\\0' ' ' | head -c 50)\" done 2\u0026gt;/dev/null | sort -nr | head -n 10 # chmod +x oomscore.sh # ./oomscore.sh 18 981 /usr/sbin/mysqld 4 31359 -bash 4 31056 -bash 1 31358 sshd: root@pts/6 1 31244 sshd: vpsee [priv] 1 31159 -bash 1 31158 sudo -i 1 31055 sshd: root@pts/3 1 30912 sshd: vpsee [priv] 1 29547 /usr/sbin/sshd -D linux里哪些命令会出发oom killer ","date":"2020-08-16","objectID":"/oom/:6:0","tags":null,"title":"Oom","uri":"/oom/"}]