<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>每天前进三十公里</title>
    <link>https://perday30kilo.github.io/</link>
    <description>Recent content on 每天前进三十公里</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://perday30kilo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ddd Practice1</title>
      <link>https://perday30kilo.github.io/ddd-practice1/</link>
      <pubDate>Tue, 01 Dec 2020 23:18:14 +0800</pubDate>
      
      <guid>https://perday30kilo.github.io/ddd-practice1/</guid>
      <description>1 DDD工作坊实操 十个步骤，依次为：
确定利益相关人
确定业务期望和愿景
对问题域的共同理解 确定项目的业务范围 确定业务流程 史诗级故事和主故事 运用用例分析场景 通过边界识别限界上下文 上下文映射 领域架构
1.1 对问题域的共同理解 对问题域的共同理解
我认为：“对问题域（Problem Domain）的识别其实就是对客户痛点的识别。之所以要开发这个软件，目的就是解决这些痛点，为应对这些问题提供具有业务价值的功能。在识别痛点的过程中，需要始终从业务期望与愿景出发，与不同的利益相关人进行交流，如此才能达成对问题域的共同理解。”在工作坊中，一位业务人员补充了我对问题域定义的不足，她认为问题域不仅是对痛点的识别，还包括系统所要提供的价值。
实操要点: 通过和产品业务的沟通识别清楚需求利益相关方的痛点
讲清楚需求的收益、关键指标、杠杆率
1.2 确定项目的业务范围 之所以要确定项目的业务范围，是为了明确整个系统的边界。明确系统边界是架构设计的重要前提，它一方面可以明确职责划分，了解哪些内容才属于领域驱动设计的范畴；另一方面则可以事先明确当前系统需要与哪些外部系统集成。
1.3 运用用例分析场景 一个主用例可以认为是一个具有业务价值的业务功能。我提出的用例场景分析步骤为：
确定业务流程，通过业务流程识别参与者（Actor）； 根据每个参与者识别属于该参与者的用例，遵循一个参与者一张用例图的原则，保证用例图的直观与清晰； 对识别出来的用例根据语义相关性和功能相关性进行分类，确定用例的主题边界，并对每个主题进行命名。 首先，我让学员通过识别系统的参与者驱动用例的识别。一个参与者一个用例图，可以让我们的用例分析既有清晰的分析起点，又能保证用例图的清晰直观：
一旦准确地识别出用例，再根据语义相关性和功能相关性对这些用例进行分组，最后，确定主题边界（Subject Boundary）就变得相对容易了.
这些识别出来的主题边界其实就是限界上下文的候选了。可以看到，不同团队因为需求理解的不同，识别出来的主题边界确实存在差别，但这个差别是非常细微的，基本能就限界上下文的边界达成一致。这些识别出来的用例同时也将作为统一语言的一部分，在后续的领域建模和战术设计中提供非常有价值的指导.
1.4 领域架构 在架构层面，我引入了RUP的4+1视图，这样可以使得领域驱动战略设计的成果显得更加系统化，能够为业务人员、开发人员、运维人员提供不同视角的架构指导。例如获得的逻辑视图可以非常清晰地表达系统层面与限界上下文层面各自的逻辑组成： 进程视图则使用时序图针对那些需要异步处理或分布式通信的用例进行了清晰刻画： </description>
    </item>
    
    <item>
      <title>Sentinel</title>
      <link>https://perday30kilo.github.io/sentinel/</link>
      <pubDate>Thu, 26 Nov 2020 23:32:11 +0800</pubDate>
      
      <guid>https://perday30kilo.github.io/sentinel/</guid>
      <description>1 Sentinel是什么 主要特性
开源生态
Sentinel 分为两个部分:
核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。 控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。
2 Quick Start 2.1 Sentinel Dashboard java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard.jar 从 Sentinel 1.6.0 起，Sentinel 控制台引入基本的登录功能，默认用户名和密码都是 sentinel
2.2 如何使用 我们说的资源，可以是任何东西，服务，服务里的方法，甚至是一段代码。使用 Sentinel 来进行资源保护，主要分为几个步骤:
1 定义资源
2 定义规则
3 检验规则是否生效
先把可能需要保护的资源定义好（埋点），之后再配置规则。也可以理解为，只要有了资源，我们就可以在任何时候灵活地定义各种流量控制规则。在编码的时候，只需要考虑这个代码是否需要保护，如果需要保护，就将之定义为一个资源。
返回布尔值方式定义资源</description>
    </item>
    
    <item>
      <title>Server Command</title>
      <link>https://perday30kilo.github.io/server-command/</link>
      <pubDate>Thu, 19 Nov 2020 22:52:53 +0800</pubDate>
      
      <guid>https://perday30kilo.github.io/server-command/</guid>
      <description>0 背景 命令行是程序员诊断问题和分析问题的基础。
1 业务日志分析 如果应用系统出现异常，一般都会在业务日志中体现 统计当天业务日志中ERROR出现数量：egrep ERROR &amp;ndash;color logname | wc -l ，如果错误数量过大，一般都是有问题的 查看日志中ERROR后10行具体报错：egrep -A 10 ERROR logname | less ，或 -C 10 查看ERROR前后10行日志
按照时间段过滤日志
sed -n &#39;/起始时间/,/结束时间/p&#39; 日志文件 sed -n &#39;/2018-12-06 00:00:00/,/2018-12-06 00:03:00/p&#39; logname # 查询三分钟内的日志，后再跟grep 过滤相应关键字 sed -n &#39;/2018-12-06 08:38:00/,$p&#39; logname | less # 查询指定时间到当前日志 ps：禁止使用vim直接打开日志文件 2 JVM相关 名称	主要作用 jps	JVM Process Status Tool,用来查看基于HotSpot的JVM里面中，所有具有访问权限的Java进程的具体状态, 包括进程ID，进程启动的路径及启动参数等等，与unix上的ps类似，只不过jps是用来显示java进程，可以把jps理解为ps的一个子集。 jstat	JVM Statistics Monitoring Tool,jstat是用于监视虚拟各种运行状态信息的命令行工具，它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。 jinfo	Configuration info for java，命令的作用是实时的查看和调整虚拟机的参数。 jmap	Memory Map for java，生成虚拟机的内存转储快照(heapdump) jhat	JVM Heap Dump Browser，用于分析heapdump文件，它会建立一个Http/HTML服务器，让用户可以在浏览器上查看分析结果 jstack	Stack Trace for java，显示虚拟机的线程快照。</description>
    </item>
    
    <item>
      <title>Oom</title>
      <link>https://perday30kilo.github.io/oom/</link>
      <pubDate>Sun, 16 Aug 2020 22:16:24 +0800</pubDate>
      
      <guid>https://perday30kilo.github.io/oom/</guid>
      <description>oomkiller 简介 按需分配物理页面 　很多情况下，一个进程会申请一块很大的内存，但只是用到其中的一小部分。为了避免内存的浪费，在分配页面时，Linux 采用的是按需分配物理页面的方式。譬如说，某个进程调用malloc()申请了一块小内存，这时内核会分配一个虚拟页面，但这个页面不会映射到实际的物理页面。 从图中可以看到，当程序首次访问这个虚拟页面时，会触发一个缺页异常 (page fault)。这时内核会分配一个物理页面，让虚拟页面映射到这个物理页面，同时更新进程的页表 (page table)。
Memory Overcommit Memory Overcommit 这种按需分配物理页面的方式，可以大大节省物理内存的使用，但有时会导致 Memory Overcommit。所谓 Memory Overcommit，也就是说，所有进程使用的虚拟内存超过了系统的物理内存和交换空间的总和。默认情况下，Linux 是允许 Memory Overcommit 的。并且在大多数情况下，Memory Overcommit 也是安全的，因为很多进程只是申请了很多内存，但实际使用到的内存并不多。 但万一很多进程都使用了申请来的大部分内存，就可能导致物理内存和交换空间不够用了，这时内核的 OOM Killer 就会出马，它会选择杀掉一个或多个进程，这样就能腾出一些内存给其它进程使用。 在 Linux 中，可以通过内核参数vm.overcommit_memory去控制是否允许 overcommit：
默认值是 0，在这种情况下，只允许轻微的 overcommit，而比较明显的 overcommit 将不被允许。 如果设置为 1，表示总是允许 overcommit。 如果设置为 2，则表示总是禁止 overcommit。也就是说，如果某个申请内存的操作将导致 overcommit，那么这个操作将不会得逞。 那么对内核来说，怎样才算 overcommit 呢？Linux 设定了一个阈值，叫做 CommitLimit，如果所有进程申请的总内存超过了 CommitLimit，那就算是 overcommit 了。在/proc/meminfo中可以看到 CommitLimit 的大小：
1 2 $ cat /proc/meminfo | grep CommitLimit CommitLimit: 3829768 kB 　CommitLimit 的值是这样计算的：</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://perday30kilo.github.io/about/</link>
      <pubDate>Tue, 07 Jul 2020 23:53:03 +0800</pubDate>
      
      <guid>https://perday30kilo.github.io/about/</guid>
      <description>每天前进三十公里，苦练基本功。 本博客由具有多年一线互联网经验的多位技术专家根据自身积累维护，仅供学习和参考。 大家一起学习一起打怪升级~~~</description>
    </item>
    
  </channel>
</rss>